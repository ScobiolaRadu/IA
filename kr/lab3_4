class NodArbore:
    def __init__(self, info, parinte=None, g=0, h=0):
        self.info = info
        self.parinte = parinte
        self.g=g
        self.h=h
        self.f=g+h

    def drumRadacina(self) :
        l=[]
        nod=self
        while nod is not None:
            l.insert(0,nod)
            nod=nod.parinte
        return l

    def vizitat(self) :
        nod=self.parinte
        while nod is not None:
            if nod.info==self.info:
                return True
            nod=nod.parinte
        return False

    def __str__(self):
        return "{} ({}, {})".format(self.info, self.g, self.f)

    def __repr__(self):
        return "({}, ({}), cost:{})".format(self.info, "->".join([str(x) for x in self.drumRadacina()]), self.f)


class Graf:
    def __init__(self, matr, start, scopuri, h):
        self.matr=matr
        self.start=start
        self.scopuri=scopuri
        self.estimari=h


    def scop(self, infoNod):
        return infoNod in self.scopuri

    def succesori(self, nod):
        l=[]
        for i in range(len(self.matr)):
            if self.matr[nod.info][i]>0:
                nodNou=NodArbore(i,nod, nod.g+self.matr[nod.info][i], self.calculeaza_h((i)))
                if not nodNou.vizitat():
                    l.append(nodNou)
        return l

    def calculeaza_h(self, info):
        return self.estimari[info]



def bin_search(listaNoduri, nodNou, ls, ld):
   if len(listaNoduri)==0:
       return 0
   if ls==ld:
       if nodNou.f<listaNoduri[ls].f:
           return ls
       elif nodNou.f>listaNoduri[ls].f:
           return ld+1
       else: # f-uri egale
           if nodNou.g < listaNoduri[ls].g:
               return ld + 1
           else:
               return ls
   else:
       mij=(ls+ld)//2
       if nodNou.f<listaNoduri[mij].f:
           return bin_search(listaNoduri, nodNou, ls, mij)
       elif nodNou.f>listaNoduri[mij].f:
           return bin_search(listaNoduri, nodNou, mij+1, ld)
       else:
           if nodNou.g < listaNoduri[mij].g:
               return bin_search(listaNoduri, nodNou, mij + 1, ld)
           else:
               return bin_search(listaNoduri, nodNou, ls, mij)

def aStarSolMultiple(gr, nrSolutiiCautate=1):
   # in coada vom avea doar noduri de tip NodParcurgere (nodurile din arborele de parcurgere)
   c = [NodArbore(gr.start)]

   while len(c) > 0:
       #print("Coada actuala: " + str(c))
       #input()
       nodCurent = c.pop(0)

       if gr.scop(nodCurent.info):
           print("Solutie:")
           drum = nodCurent.drumRadacina()
           print(("->").join([str(n.info) for n in drum]))
           print("cost:", nodCurent.g)
           print("\n----------------\n")
           #input()
           nrSolutiiCautate -= 1
           if nrSolutiiCautate == 0:
               return
       #[2,4,7,8,10,14]
       # c+=gr.succesori(nodCurent)
       for s in gr.succesori(nodCurent):
           indice=bin_search(c, s, 0, len(c)-1)
           if indice==len(c):
               c.append(s)
           else:
               c.insert(indice, s)


def a_star(graf):
    start = NodArbore(graf.start)
    open = [start]
    closed = []

    while open:
        nod_curent = open.pop(0)
        closed.append(nod_curent)

        if graf.scop(nod_curent.info):
            drum = nod_curent.drumRadacina()
            print("Solutie:", "->".join(str(n.info) for n in drum))
            print("Costul minim:", nod_curent.g)
            print("\n----------------\n")
            return

        succesori = graf.succesori(nod_curent)
        for succesor in succesori:
            g_succesor = nod_curent.g + graf.matr[nod_curent.info][succesor.info]
            h_succesor = graf.calculeaza_h(succesor.info)
            nod_nou = NodArbore(succesor.info, nod_curent, g_succesor, h_succesor)

            in_open = False
            for nod_open in open:
                if nod_open.info == nod_nou.info:
                    in_open = True
                    if nod_open.g + nod_open.h > nod_nou.g + nod_nou.h:
                        open.remove(nod_open)
                        open.append(nod_nou)
                    break

            if not in_open:
                in_closed = False
                for nod_closed in closed:
                    if nod_closed.info == nod_nou.info:
                        in_closed = True
                        if nod_closed.g + nod_closed.h > nod_nou.g + nod_nou.h:
                            closed.remove(nod_closed)
                            open.append(nod_nou)
                        break

                if not in_closed:
                    open.append(nod_nou)

        open.sort(key=lambda nod: nod.g + nod.h)




m = [
[0, 3, 5, 10, 0, 0, 100],
[0, 0, 0, 4, 0, 0, 0],
[0, 0, 0, 4, 9, 3, 0],
[0, 3, 0, 0, 2, 0, 0],
[0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 4, 0, 5],
[0, 0, 3, 0, 0, 0, 0],
]
start = 0
scopuri = [4,6]
h=[0,1,6,2,0,3,0]

m2 = [
    [0, 6, 5, 0, 21, 9],
    [2, 0, 0, 1, 0, 5],
    [0, 0, 0, 7, 0, 3],
    [1, 4, 3, 0, 12, 8],
    [0, 0, 0, 0, 0, 0],
    [3, 7, 4, 5, 1, 0]
]

start2 = 0
scopuri2 = [3, 5]
h2=[0, 1, 6, 2, 0, 3]


gr2=Graf(m2, start2, scopuri2, h2)
aStarSolMultiple(gr2, nrSolutiiCautate=3)

print("Exercitiul 4\n")
gr=Graf(m, start, scopuri, h)
a_star(gr)
